import 'dart:convert';
import 'dart:ui';

import 'package:conditional_builder/conditional_builder.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:nb_utils/nb_utils.dart';
import 'package:project/common_functions.dart';
import 'package:project/dioHelper.dart';
import 'package:project/home.dart';
import 'package:project/models/get_wallet_model.dart';
import 'package:http/http.dart' as http;

import 'package:project/models/gift_model.dart';
import 'package:project/models/notification_model.dart';
import 'package:project/models/roomUser.dart';
import 'package:project/models/room_data_model.dart';
import 'package:project/models/send_gift_model.dart';
import 'package:project/utils/constants.dart';
import 'package:project/view/details/users_Inroom.dart';
import 'package:project/view/home/homeCubit.dart';
import 'package:project/view/home/states.dart';

class GiftScreen extends StatefulWidget {
  String roomID;
  String userID;
  String username;
  bool check;

  GiftScreen({Key key, this.roomID, this.userID, this.username, this.check})
      : super(key: key);
  String type;
  String giftID;
  final GlobalKey _menuKey = GlobalKey();

  @override
  State<GiftScreen> createState() => _GiftScreenState();
}

class _GiftScreenState extends State<GiftScreen> {
  // String dropdownvalue = 'sendToAllUser';
  var items = [
    'sendToAllUser',
    'sendToRoom',
    'sendToUser',
  ];

  var _controller = TextEditingController();
  int counter = 1;
  int selectedCard = -1;
  String dropDownValue = 'One';
  String senduserId;
  @override
  var fromkey = GlobalKey<FormState>();
  int index = 0;
  String newValue;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => HomeCubit()
        ..getWalletAmount()
        ..getGift()
        ..getroomuser(id: widget.roomID),
      child: BlocConsumer<HomeCubit, HomeStates>(
        listener: (context, state) {},
        builder: (context, state) {
          _controller.text = counter.toString();

          return ConditionalBuilder(
            condition: HomeCubit.get(context).getWalletModel != null &&
                HomeCubit.get(context).giftModel != null &&
                HomeCubit.get(context).roomUserModel != null,
            builder: (context) => Column(
              children: [
                /////////////////////////////////////////
                GridView.builder(
                  itemCount: model.data.length,
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 3, // Number of columns
                    crossAxisSpacing: 8.0, // Spacing between columns
                    mainAxisSpacing: 8.0, // Spacing between rows
                  ),
                  itemBuilder: (context, index) {
                    return buildGridProduct(model.data[index], index);
                  },
                ),

                /////////////////////////////////////////
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: GridView.builder(
                      itemCount: HomeCubit.get(context).giftModel.data.length,
                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 3, // Number of columns
                        crossAxisSpacing: 8.0, // Spacing between columns
                        mainAxisSpacing: 8.0, // Spacing between rows
                      ),
                      itemBuilder: (context, index) {
                        return buildGridProduct(
                          HomeCubit.get(context).giftModel.data[index],
                          index,
                        );
                      },
                    ),
                  ),
                ),
              ],
            ),
            fallback: (context) => Container(
              height: MediaQuery.of(context).size.height * 0.40,
              color: Colors.black.withOpacity(0.7),
              child: Center(
                child: CircularProgressIndicator(),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget getIntresItem(
    GiftModel model,
    BuildContext context,
    GetWalletData model1,
    InRoomUserModelModelData model2,
    InRoomUserModelModel model3,
    int index,
    String newValue,
    String dropDownValue,
  ) =>
      Container(
        height: MediaQuery.of(context).size.height * 0.40,
        child: Column(
          children: <Widget>[
            Row(children: [
              // Expanded for wallet amount
              Expanded(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      height: 30,
                      child: Row(
                        children: [
                          Text(
                            model1.walletAmount.toString(),
                            style: secondaryTextStyle(color: Colors.white),
                            maxLines: 3,
                            textAlign: TextAlign.start,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ]),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: ListView.builder(
                  itemCount: model.data.length,
                  itemBuilder: (context, index) {
                    return buildGridleProduct(model.data[index], index);
                  },
                ),
              ),
            ),
            Row(
              children: [
                SizedBox(
                  width: 10,
                ),
                Container(
                  decoration: ShapeDecoration(
                    color: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(27.0)),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: <Widget>[
                      SizedBox(
                        width: 10,
                      ),
                      DropdownButtonHideUnderline(
                        child: Theme(
                            data: Theme.of(context).copyWith(
                              canvasColor: Colors.grey.shade300,
                            ),
                            child: StatefulBuilder(
                              builder: (context, setState) {
                                return DropdownButton<String>(
                                    hint: Text(
                                      'اختر عضو',
                                      style: TextStyle(
                                          color: kPrimaryLightColor,
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold),
                                    ),
                                    icon: Icon(
                                      Icons.arrow_drop_down,
                                      color: Colors.grey,
                                    ),
                                    value: widget.check == true
                                        ? widget.username
                                        : newValue,
                                    items: List.generate(
                                        model3.data.length + 1,
                                        (index) => DropdownMenuItem(
                                            value: index < model3.data.length
                                                ? model3.data[index].name
                                                    .toString()
                                                : '-1',
                                            child: Center(
                                                child: Text(
                                              index < model3.data.length
                                                  ? model3.data[index].name ??
                                                      'Default Text' // Add null check here
                                                  : 'اختيار الكل',
                                              style: TextStyle(
                                                  // fontSize: 10,
                                                  color: Colors.blue),
                                            )))),
                                    onChanged: (String value) {
                                      // newValue = newValue;
                                      print(value);
                                      setState(() {
                                        newValue = value;
                                        senduserId = model3.data[index].userId
                                            .toString();

                                        print(
                                            '________________________$newValue');
                                        print(senduserId);
                                        widget.check = false;
                                        // print(model2.userId.toString());
                                      });
                                    });
                              },
                            )),
                      ),
                    ],
                  ),
                ),
                Spacer(),
                Container(
                  height: 40,
                  width: 60,
                  // color: Colors.blue,
                  child: InkWell(
                    child: new Container(
                      decoration: new BoxDecoration(
                        color: kPrimaryLightColor,
                        borderRadius: new BorderRadius.only(
                          bottomLeft: const Radius.circular(40.0),
                          topLeft: const Radius.circular(40.0),
                        ),
                      ),
                      child: Center(
                          child: Text(
                        "إرسال",
                        style: TextStyle(color: Colors.white),
                      )),
                    ),
                    onTap: () {
                      if (senduserId == null) {
                        senduserId = widget.userID.toString();
                      }
                      // print('userID is${widget.userID}');
                      // print('userID is${widget.check}');
                      print('userID is$senduserId');
                      print('giftID is$giftID');
                      print('roomId is${widget.roomID}');
                      print(_controller.text);
                      HomeCubit.get(context).sendgift(
                          id: widget.roomID,
                          type: 'user',
                          giftid: giftID,
                          received: senduserId.toInt(),
                          count: _controller.text);
                      giftID = '0';
                    },
                  ),
                ),
                Theme(
                  data: Theme.of(context)
                      .copyWith(splashColor: Colors.transparent),
                  child: Container(
                    width: 130,
                    height: 40,
                    child: TextFormField(
                      controller: _controller,
                      autofocus: false,
                      style:
                          TextStyle(fontSize: 22.0, color: Color(0xFFbdc6cf)),
                      decoration: InputDecoration(
                        filled: true,
                        fillColor: white,
                        prefixIcon: IconButton(
                          icon: Icon(Icons.remove),
                          onPressed: () {
                            if (counter > 1) {
                              counter--;
                              _controller.text = counter.toString();
                              print(_controller.text);
                            }
                          },
                        ),
                        suffixIcon: IconButton(
                          icon: Icon(Icons.add),
                          onPressed: () {
                            setState(() {
                              counter++;
                              _controller.text = counter.toString();
                              print(_controller.text);
                            });
                          },
                        ),
                        enabledBorder: UnderlineInputBorder(
                          borderSide: BorderSide(color: KstorebuttonColor),
                          borderRadius: new BorderRadius.only(
                            bottomRight: const Radius.circular(40.0),
                            topRight: const Radius.circular(40.0),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                SizedBox(
                  width: 10,
                ),
              ],
            )
          ],
        ),
      );

  Widget buildGridProduct(GiftData model, int index) => GridTile(
    child: GestureDetector(
      onTap: () {
        setState(() {
          selectedCard = index;
          giftID = model.id.toString();
          print(giftID);
        });
      },
      child: Container(
        decoration: BoxDecoration(
          color: selectedCard == index ? Colors.blue : Colors.white,
          borderRadius: BorderRadius.circular(8.0),
        ),
        child: Column(
          children: [
            Container(
              height: 60,
              child: Image.network(
                (model.url ?? '') + model.giftLink,
                width: 60,
                height: 60,
              ),
            ),
            Spacer(),
            Container(
              height: 35,
              decoration: BoxDecoration(
                color: KstorebuttonColor,
                borderRadius: BorderRadius.only(
                  bottomLeft: Radius.circular(5),
                  bottomRight: Radius.circular(5),
                ),
              ),
              child: Center(
                child: Text(
                  model.price.toString(),
                ),
              ),
            ),
          ],
        ),
      ),
    ),
  );
}
